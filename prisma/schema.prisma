generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByAggregateGroup"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Api tables
model ApiMember {
  id                 Int      @id @default(autoincrement()) @map("id")
  ethAddress         String   @unique @db.VarChar(42) @map("eth_address")
  totalLiquidity     Decimal? @map("total_liquidity") @db.Decimal(20, 8)
  totalRewardsEarned Decimal? @map("total_rewards_earned") @db.Decimal(20, 8)
  netGain            Decimal? @map("net_gain") @db.Decimal(20, 8)
  netPosition        Decimal? @map("net_position") @db.Decimal(20, 8)
  claimed            Boolean  @default(false) @map("claimed")
  cap                Int?     @map("cap")
  nonce              String   @default(uuid()) @map("nonce")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // relations
  txMember TxMember @relation(fields: [ethAddress], references: [ethAddress])
  @@map("api_member")
}

// Tx tables
model TxMember {
  ethAddress        String     @id @db.VarChar(42) @map("eth_address")
  type              MemberType @map("type")
  alias             String?    @db.VarChar(42) @map("alias")
  epoch             Int        @map("epoch")
  liquidityCap      Int?       @map("liquidity_cap")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  daoId             String     @map("dao_id")
  // relations
  apiMember            ApiMember?
  txDaoTokens          TxDaoToken[]
  txLiquidityTokens    TxLiquidityToken[]
  fromRewards           TxRewards[] @relation("TxMemberToTxRewards_fromEthAddress") // maybe sentValue... receivedValue... would be better than toValue... fromValue...
  toRewards            TxRewards[] @relation("TxMemberToTxRewards_toEthAddress")
  fromElects           TxElects[] @relation("TxMemberToTxElects_fromEthAddress")
  toElects             TxElects[] @relation("TxMemberToTxElects_toEthAddress")

  @@index([epoch], name: "tx_member_epoch")
  @@index([daoId])
  @@map("tx_member")
}

model TxDaoToken {
  id              Int                @id @default(autoincrement()) @map("id")
  ethAddress      String             @db.VarChar(42) @map("eth_address")
  epoch           Int                @map("epoch")
  transactionType DtTransactionType  @map("transaction_type")
  amount          Decimal            @map("amount") @db.Decimal(20, 8)
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  daoId           String             @map("dao_id")
  
  // relations
  txMember TxMember @relation(fields: [ethAddress], references: [ethAddress])

  @@index([epoch], name: "tx_dao_token_epoch")
  @@index([ethAddress], name: "tx_dao_token_eth_address")
  @@index([daoId])
  @@map("tx_dao_token")
}

model TxDao {
  epoch                         Int      @id @map("epoch")
  dtWithdrawFee                 Int      @map("dt_withdraw_fee")
  ltWithdrawFee                 Int      @map("lt_withdraw_fee")
  dtIssuanceAmount              Int      @map("dt_issuance_amount")
  dtDistributions               Json?    @map("dt_distributions")
  createdAt                     DateTime @default(now()) @map("created_at")
  updatedAt                     DateTime @updatedAt @map("updated_at")
  daoId                         String   @unique @map("dao_id")
  tokenSymbol                   String   @map("token_symbol")
  daoName                       String   @map("dao_name")

  // dtDistributions will be populated at the end of the epoch
  // and will contain the results of the epoch rewards.
  @@map("tx_dao")
  @@index([daoId])
}

model TxElects {
  id             Int      @id @default(autoincrement()) @map("id")
  fromEthAddress String   @db.VarChar(42) @map("from_eth_address")
  toEthAddress   String   @db.VarChar(42) @map("to_eth_address")
  epoch          Int      @map("epoch")
  weight         Int      @map("weight")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  daoId          String   @map("dao_id")
  // relations

  fromTxMember TxMember @relation("TxMemberToTxElects_fromEthAddress", fields: [fromEthAddress], references: [ethAddress])
  toTxMember   TxMember @relation("TxMemberToTxElects_toEthAddress", fields: [toEthAddress], references: [ethAddress])

  @@unique([fromEthAddress, toEthAddress, epoch])
  @@index([daoId])
  @@index([epoch])
  @@index([fromEthAddress])
  @@index([toEthAddress])

  @@map("tx_elects")
}

model TxLiquidityToken {
  id              Int                 @id @default(autoincrement()) @map("id")
  ethAddress      String              @db.VarChar(42) @map("eth_address")
  epoch           Int                 @map("epoch")
  transactionType LtTransactionType   @map("transaction_type")
  amount          Decimal             @map("amount") @db.Decimal(20, 8)
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  daoId           String              @map("dao_id")
  // relations
  txMember TxMember @relation(fields: [ethAddress], references: [ethAddress])

  @@index([daoId])
  @@index([epoch], name: "tx_liquidity_token_epoch")
  @@index([ethAddress], name: "tx_liquidity_token_eth_address")

  @@map("tx_liquidity_token")
}

model TxRewards {
  id             Int      @id @default(autoincrement()) @map("id")
  fromEthAddress String   @db.VarChar(42) @map("from_eth_address")
  toEthAddress   String   @db.VarChar(42) @map("to_eth_address")
  epoch          Int      @map("epoch")
  weight         Int      @map("weight")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  daoId          String   @map("dao_id")
  //relations
  fromTxMember TxMember @relation("TxMemberToTxRewards_fromEthAddress", fields: [fromEthAddress], references: [ethAddress])
  toTxMember   TxMember @relation("TxMemberToTxRewards_toEthAddress", fields: [toEthAddress], references: [ethAddress])

  @@index([daoId])
  @@unique([fromEthAddress, toEthAddress, epoch], name: "TxRewards_fromEthAddress_toEthAddress_epoch_key")
  @@index([epoch], name: "tx_rewards_epoch")
  @@index([fromEthAddress], name: "tx_rewards_from_eth_address")
  @@index([toEthAddress], name: "tx_rewards_to_eth_address")

  @@map("tx_rewards")
}

// enums
enum MemberType {
  ENTITY
  PERSONAL
}

enum DtTransactionType {
  CONTRIBUTOR_REWARD
  LP_REWARD
  SWAP
  STAKE
}

enum LtTransactionType {
  DEPOSIT
  WITHDRAW
  SWAP
}
