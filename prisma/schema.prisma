generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByAggregateGroup"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tx tables
model TxMember {
  id                    Int        @id @default(autoincrement()) @map("id")
  ethAddress            String     @db.VarChar(42) @map("eth_address")
  type                  MemberType @map("type")
  alias                 String?    @db.VarChar(42) @map("alias")
  createdEpoch          Int        @map("created_epoch")
  liquidityCapUsdc      Int?       @map("liquidity_cap_usdc")
  liquidityCapEpochUsdc Int?       @map("liquidity_cap_epoch_usdc")

  // previous ApiMember fields
  totalLiquidity     Decimal? @map("total_liquidity") @db.Decimal(20, 8)
  totalRewardsEarned Decimal? @map("total_rewards_earned") @db.Decimal(20, 8)
  netGain            Decimal? @map("net_gain") @db.Decimal(20, 8)
  netPosition        Decimal? @map("net_position") @db.Decimal(20, 8)
  claimed            Boolean  @default(false) @map("claimed")
  cap                Int?     @map("cap")
  nonce              String   @default(uuid()) @map("nonce")

  // utility fields
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // scalar relation fields
  txDaoId      Int @map("tx_dao_id")
  txProtocolId Int @map("tx_protocol_id")

  // relations
  txDao           TxDao
  txProtocol      TxProtocol
  txDntTokens     TxDntToken[]
  txUsdcTokens    TxUsdcToken[]
  fromAllocations TxAllocation[] @relation("TxMemberToTxAllocation_fromTxMember") // maybe sentValue... receivedValue... would be better than toValue... fromValue...
  toAllocations   TxAllocation[] @relation("TxMemberToTxAllocation_toTxMember")
  fromDelegations TxDelegation[] @relation("TxMemberToTxDelegation_fromTxMember")
  toDelegations   TxDelegation[] @relation("TxMemberToTxDelegation_toTxMember")


  // contraints
  @@unique([txDaoId, ethAddress])
  @@unique([txDaoId, alias])

  // index
  @@index([ethAddress], name: "ethAddress")
  @@index([txDaoId], name: "tx_member_tx_dao_id")
  @@index([txProtocolId], name: "tx_member_tx_protocol_id")

  @@map("tx_member")
}

model TxDntToken {
  id              Int                @id @default(autoincrement()) @map("id")
  transactionType DntTransactionType @map("transaction_type")
  amount          Decimal            @map("amount") @db.Decimal(20, 8)
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")

  // scalar relation fields
  txProtocolId Int @map("tx_protocol_id")
  txMemberId   Int @map("tx_member_id")

  // relations
  txProtocol TxProtocol @relation(fields: [txProtocolId], references: [id])
  txMember   TxMember   @relation(fields: [txMemberId], references: [id])

  // indexes
  @@index([txProtocolId], name: "tx_dnt_token_tx_protocol_id")
  @@index([txMemberId], name: "tx_dnt_token_tx_member")

  @@map("tx_dnt_token")
}

model TxProtocol {
  id                  Int      @id @default(autoincrement()) @map("id")
  epoch               Int      @map("epoch")
  dntWithdrawFee      Int      @map("dnt_withdraw_fee")
  usdcWithdrawFee     Int      @map("usdc_withdraw_fee")
  mintAmt             Int      @map("mint_amt")
  budgetAmt           Int      @map("budget_amt")
  rewardDistributions Json?    @map("dnt_reward_distributions")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // scalar relation fields
  txDaoId Int @map("tx_dao_id")

  // relations
  txDao TxDao @relation("TxDaoToTxProtocol", fields: [txDaoId], references: [id])

  // contraints
  @@unique([epoch, txDaoId])

  // indexes
  @@index([epoch])
  @@index([txDaoId])

  // dntRewardDistributions will be populated at the end of the epoch
  // and will contain the results of the epoch allocations.
  @@map("tx_protocol")
}

model TxDelegation {
  id        Int      @id @default(autoincrement()) @map("id")
  weight    Int      @map("weight")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // scalar relation fields
  txProtocolId   Int @map("tx_protocol_id")
  fromTxMemberId Int @map("from_tx_member_id")
  toTxMemberId   Int @map("to_tx_member_id")

  // relations
  txProtocol   TxProtocol @relation("TxProtocolToTxDelegation", fields: [txProtocolId], references: [id])
  fromTxMember TxMember   @relation("TxMemberToTxDelegation_fromTxMember", fields: [fromTxMemberId], references: [id])
  toTxMember   TxMember   @relation("TxMemberToTxDelegation_toTxMember", fields: [fromTxMemberId], references: [id])

  // contraints
  @@unique([txProtocolId, fromTxMemberId, toTxMemberId])

  // indexes
  @@index([txProtocolId])
  @@index([fromTxMemberId])
  @@index([toTxMemberId])

  @@map("tx_delegation")
}

model TxUsdcToken {
  id              Int                 @id @default(autoincrement()) @map("id")
  epoch           Int                 @map("epoch")
  transactionType UsdcTransactionType @map("transaction_type")
  amount          Decimal             @map("amount") @db.Decimal(20, 8)
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")

  // scalar relation fields
  txProtocolId Int @map("tx_protocol_id")
  txMemberId   Int @map("tx_member_id")

  // relations
  txProtocol TxProtocol @relation("TxProtocol", fields: [txProtocolId], references: [id])
  txMember   TxMember   @relation("TxMember", fields: [txMemberId], references: [id])

  // indexes
  @@index([epoch], name: "tx_usdc_token_epoch")
  @@index([txMemberId], name: "tx_usdc_token_tx_member_id")

  @@map("tx_usdc_token")
}

model TxAllocation {
  id        Int      @id @default(autoincrement()) @map("id")
  weight    Int      @map("weight")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // scalar relation fields
  txProtocolId   Int @map("tx_protocol_id")
  fromTxMemberId Int @map("from_tx_member_id")
  toTxMemberId   Int @map("to_tx_member_id")

  //relations
  txProtocol   TxProtocol @relation(fields: [txProtocolId], references: [id])
  fromTxMember TxMember   @relation("TxMemberToTxAllocation_fromTxMember")
  toTxMember   TxMember   @relation("TxMemberToTxAllocation_toTxMember")

  //contraints
  @@unique([fromTxMemberId, toTxMemberId, txProtocolId], name: "TxAllocation_fromTxMemberId_toTxMemberId_epoch_key")

  // indexes
  @@index([fromTxMemberId], name: "tx_allocation_from_tx_member_id")
  @@index([toTxMemberId], name: "tx_allocation_to_tx_member_id")
  @@index([txProtocolId], name: "tx_protocol_id")

  @@map("tx_allocation")
}

model TxDao {
  id          Int    @id @default(autoincrement()) @map("id")
  name        String @map("name")
  tokenSymbol String @map("token_symbol")

  //relations
  txProtocols TxProtocol[] @relation("txProtocols")
  txMembers   TxMember[]   @relation("TxMembers")
  proposals   Proposal[]   @relation("proposals")

  @@map("tx_dao")
}

// voting
model Proposal {
  id        Int      @id @default(autoincrement()) @map("id")
  name      String   @map("name")
  desc      String   @map("desc") //@todo text field
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // scalar relation fields
  txDaoId                Int @map("tx_dao_id")
  txProtocolResolutionId Int @map("tx_protocol_resolution_id")
  proposerId             Int @map("proposer_id")

  //relations
  txDao      TxDao      @relation("TxDaoToTxProtocol", fields: [txDaoId], references: [id])
  txProtocol TxProtocol @relation(fields: [txProtocolId], references: [id])
  proposer   TxMember   @relation(fields: [proposerId], references: [id])

  //indexes
  @@index([txDaoId])
  @@index([txProtocolId])

  @@map("proposal")
}

model ProposalVote {
  id        Int      @id @default(autoincrement()) @map("id")
  inFavorOf Boolean  @map("in_favor_of")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // scalar relation fields
  proposalId Int @map("proposal_id")
  txMemberId Int @map("tx_member_id")

  //relations
  proposal Proposal @relation(fields: [proposalId], references: [id])
  txMember TxMember @relation(fields: [txMemberId], references: [id])

  // constraints
  @@unique([proposalId, txMemberId])

  //indexes
  @@index([proposalId])
  @@index([txMemberId])

  @@map("proposal_vote")
}

// enums
enum MemberType {
  ENTITY
  PERSONAL
}

enum DntTransactionType {
  CONTRIBUTOR_REWARD
  LP_REWARD
  SWAP
  STAKE
}

enum UsdcTransactionType {
  DEPOSIT
  WITHDRAW
  SWAP
}
